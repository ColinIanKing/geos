
;font handling functions, mostly for internal (Kernal) use

;17-8-99 - ACME port

_GetRealSize					;de42
		+subv 32
		JSR GetChWdth1
		TAY
		TXA
		LDX curHeight
		PHA
		AND #$40
		BEQ GReSiz1
		INY
GReSiz1 	PLA				;de52
		AND #8
		BEQ GReSiz2
		INX
		INX
		INY
		INY
		LDA baselineOffset
		+addv 2
		RTS
GReSiz2 	LDA baselineOffset		;de61
		RTS

Font_1						;de64
		LDY r1H
		INY
	STY E87FE
		STA r5L
		LDX #0
		+addv 32
		JSR GetRealSize
		TYA
		PHA
		LDA r5L
		ASL
		TAY
		LDA (curIndexTable),y
		STA r2L
		AND #%00000111
	STA E87FD
		LDA r2L
		AND #%11111000
		STA r3L
		INY
		LDA (curIndexTable),y
		STA r2H
		PLA
		+add r2L
		STA r6H
		CLC
		SBC r3L
		LSR
		LSR
		LSR
		STA r3H
		TAX
		CPX #3
		BCC Font_11
		LDX #3
Font_11 	LDA Font_tabL,x 		;dea3
		STA r13L
		LDA Font_tabH,x
		STA r13H
		LDA r2L
		LSR r2H
		ROR
		LSR r2H
		ROR
		LSR r2H
		ROR
		+add cardDataPntr
		STA r2L
		LDA r2H
		ADC cardDataPntr+1
		STA r2H
	LDY E87FD
		LDA BitMask3,y
		EOR #$ff
	STA E87FC
		LDY r6H
		DEY
		TYA
		AND #%00000111
		TAY
		LDA BitMask4,y
		EOR #$ff
		STA r7H
		LDA currentMode
		TAX
		AND #SET_OUTLINE
		BEQ Font_12
		LDA #$80
Font_12 	STA r8H 			;dee5
		LDA r5L
		+addv 32
		JSR GetRealSize
		STA r5H
		+SubB r5H, r1H
		STX r10H
		TYA
		PHA
		LDA r11H
		BMI Font_13
		+CmpW rightMargin, r11
		BCC Font_16
Font_13 	LDA currentMode 		;df0c
		AND #SET_ITALIC
		BNE Font_14
		TAX
Font_14 	TXA				;df13
		LSR
		STA r3L
		+add r11L
		STA FontTVar2
		LDA r11H
		ADC #0
		STA FontTVar2+1
		+PopB PrvCharWidth
		+add FontTVar2
		STA r11L
		LDA #0
		ADC FontTVar2+1
		STA r11H
		BMI Font_17
		+CmpW leftMargin, r11
		BCS Font_17
	JSR Font_2
		LDX #0
		LDA currentMode
		AND #SET_REVERSE
		BEQ Font_15
		DEX
Font_15 	STX r10L			;df4f
		CLC
		RTS

Font_16 					;df53
		+PopB PrvCharWidth
		+add r11L
		STA r11L
		BCC Font_18
		INC r11H
		SEC
		RTS
Font_17 					;df62
		+SubB r3L, r11L
		BCS Font_18
		DEC r11H
Font_18 	SEC				;df6d
		RTS

Font_tabL	!byte <FontGt1, <FontGt2, <FontGt3, <FontGt4
Font_tabH	!byte >FontGt1, >FontGt2, >FontGt3, >FontGt4

Font_2						;df77
		LDX r1H
		JSR GetScanLine
		LDA FontTVar2
		LDX FontTVar2+1
		BMI Font_22
		CPX leftMargin+1
		BNE Font_21
		CMP leftMargin
Font_21 	BCS Font_23			;df8a
Font_22 	LDX leftMargin+1		;df8c
		LDA leftMargin
Font_23 	PHA				;df90
		AND #%11111000
		STA r4L
		CPX #0
		BNE Font_24
		CMP #$c0
		BCC Font_26
Font_24 	+subv $80			;df9d
		PHA
		+AddVB $80, r5L
		STA r6L
		BCC Font_25
		INC r5H
		INC r6H
Font_25 	PLA				;dfb0
Font_26 	STA r1L 			;dfb1
		+MoveB FontTVar2+1, r3L
		LSR r3L
		LDA FontTVar2
		ROR
		LSR r3L
		ROR
		LSR r3L
		ROR
		STA r7L
		LDA leftMargin+1
		LSR
		LDA leftMargin
		ROR
		LSR
		LSR
		+sub r7L
		BPL Font_27
		LDA #0
Font_27 	STA FontTVar1			;dfd5
		LDA FontTVar2
		AND #%00000111
		STA r7L
		PLA
		AND #%00000111
		TAY
		LDA BitMask3,y
		STA r3L
		EOR #$ff
		STA r9L
		LDY r11L
		DEY
		LDX rightMargin+1
		LDA rightMargin
		CPX r11H
		BNE Font_28
		CMP r11L
Font_28 	BCS Font_29			;dff9
		TAY
Font_29 	TYA
		AND #%00000111
		TAX
		LDA BitMask4,x
		STA r4H
		EOR #$ff
		STA r9H
		TYA
		+sub r4L
		BPL Font_210
		LDA #0
Font_210	LSR				;e011
		LSR
		LSR
		+add FontTVar1
		STA r8L
		CMP r3H
		BCS Font_211
		LDA r3H
Font_211	CMP #3				;e020
		BCS Font_213
		CMP #2
		BNE Font_212
		LDA #1
Font_212	ASL				;e02a
		ASL
		ASL
		ASL
		STA r12L
		LDA r7L
	+sub E87FD
		+addv 8
		+add r12L
		TAX
		LDA Font_tab2,x
		+addv <FontSH1
		TAY
		LDA #0
		ADC #>FontSH1
		BNE Font_214
Font_213	LDA #>FontSH5			;e04a
		LDY #<FontSH5
Font_214	STA r12H			;e04e
		STY r12L
Font_215	CLC				;e052
		RTS

Font_tab2					;e054
		!byte <(FntSh56-FontSH1)
		!byte <(FontSH3-FontSH1+0)
		!byte <(FontSH3-FontSH1+1)
		!byte <(FontSH3-FontSH1+2)
		!byte <(FontSH3-FontSH1+3)
		!byte <(FontSH3-FontSH1+4)
		!byte <(FontSH3-FontSH1+5)
		!byte <(FontSH3-FontSH1+6)
		!byte <(FontSH1-FontSH1+7)
		!byte <(FontSH1-FontSH1+6)
		!byte <(FontSH1-FontSH1+5)
		!byte <(FontSH1-FontSH1+4)
		!byte <(FontSH1-FontSH1+3)
		!byte <(FontSH1-FontSH1+2)
		!byte <(FontSH1-FontSH1+1)
		!byte <(FontSH1-FontSH1+0)
		!byte <(FntSh56-FontSH1)
		!byte <(FontSH4-FontSH1+0)
		!byte <(FontSH4-FontSH1+5)
		!byte <(FontSH4-FontSH1+10)
		!byte <(FontSH4-FontSH1+15)
		!byte <(FontSH4-FontSH1+20)
		!byte <(FontSH4-FontSH1+25)
		!byte <(FontSH4-FontSH1+30)
		!byte <(FontSH2-FontSH1+35)
		!byte <(FontSH2-FontSH1+30)
		!byte <(FontSH2-FontSH1+25)
		!byte <(FontSH2-FontSH1+20)
		!byte <(FontSH2-FontSH1+15)
		!byte <(FontSH2-FontSH1+10)
		!byte <(FontSH2-FontSH1+5)
		!byte <(FontSH2-FontSH1+0)

Font_3		LDA currentMode 		;e074
		BPL Font_32
		LDY r1H
	CPY E87FE
		BEQ Font_31
		DEY
	CPY E87FE
		BNE Font_32
Font_31 	LDA r10L			;e085
		EOR #$ff
		STA r10L
Font_32 	+bbrf ITALIC_BIT, currentMode, Font_215 ;e08b
		LDA r10H
		LSR
		BCS Font_35
		LDX FontTVar2
		BNE Font_33
		DEC FontTVar2+1
Font_33 	DEX				;e09e
		STX FontTVar2
		LDX r11L
		BNE Font_34
		DEC r11H
Font_34 	DEX				;e0a8
		STX r11L
	JSR Font_2
Font_35 	+CmpW rightMargin, FontTVar2
		BCC Font_36
		+CmpW leftMargin, r11
		RTS
Font_36 	SEC				;e0c7
		RTS

Font_4		LDY r1L 			;e0c9
		LDX FontTVar1
		LDA Z45,x
		CPX r8L
		BEQ Font_43
		BCS Font_44
		EOR r10L
		AND r9L
		STA Font4_B1
		LDA r3L
		AND (r6),y
Font4_B1 = *+1
		ORA #0
		STA (r6),y
		STA (r5),y
Font_41 	TYA				;e0e7
		+addv 8
		TAY
		INX
		CPX r8L
		BEQ Font_42
		LDA Z45,x
		EOR r10L
		STA (r6),y
		STA (r5),y
		+bra Font_41
Font_42 	LDA Z45,x			;e0fc
		EOR r10L
		AND r9H
		STA Font4_B2
		LDA r4H
		AND (r6),y
Font4_B2 = *+1
		ORA #0
		STA (r6),y
		STA (r5),y
		RTS
Font_43 	EOR r10L			;e110
		AND r9H
		EOR #$ff
		ORA r3L
		ORA r4H
		EOR #$ff
		STA Font4_B3
		LDA r3L
		ORA r4H
		AND (r6),y
Font4_B3 = *+1
		ORA #0
		STA (r6),y
		STA (r5),y
Font_44 	RTS				;e12b

Font_5		LDX r8L 			;e12c
		LDA #0
Font_51 STA E87FF,x				;e130
		DEX
		BPL Font_51
		LDA r8H
		AND #%01111111
		BNE Font_54
Font_52 JSR Font_8				;e13c
Font_52_2	LDX r8L
Font_53 LDA E87FF,x				;e141
		STA Z45,x
		DEX
		BPL Font_53
		INC r8H
		RTS
Font_54 	CMP #1				;e14c
		BEQ Font_55
		LDY r10H
		DEY
		BEQ Font_52
		DEY
		PHP
	JSR Font_8
	JSR Font_6
		PLP
		BEQ Font_56
Font_55 JSR Font_6				;e160
		JSR FntIndirectJMP
	JSR Font_8
		+SubW curSetWidth, r2
Font_56 	JSR FntIndirectJMP		;e176
	JSR Font_8
	JSR Font_7
		+bra Font_52_2

Font_6		+AddW curSetWidth, r2		;e182
		RTS

Font_7		LDY #$ff			;e190
Font_71 	INY				;e192
		LDX #7
Font_72 	LDA Z45,y			;e195
		AND BitMask2,x
		BEQ Font_73
		LDA BitMask2,x
		EOR #$ff
	AND E87FF,y
	STA E87FF,y
Font_73 	DEX				;e1a8
		BPL Font_72
		CPY r8L
		BNE Font_71
		RTS

Font_8	JSR Font_9				;e1b0
		LDY #$ff
Font_81 	INY				;e1b5
		LDX #7
Font_82 	LDA Z45,y			;e1b8
		AND BitMask2,x
		BEQ Font_87
	LDA E87FF,y
		ORA BitMask2,x
	STA E87FF,y
		INX
		CPX #8
		BNE Font_83
	LDA E87FE,y
		ORA #1
	STA E87FE,y
		BNE Font_84
Font_83 LDA E87FF,y				;e1d8
		ORA BitMask2,x
	STA E87FF,y
Font_84 	DEX				;e1e1
		DEX
		BPL Font_85
	LDA E8800,y
		ORA #$80
	STA E8800,y
		BNE Font_86
Font_85 LDA E87FF,y				;e1ef
		ORA BitMask2,x
	STA E87FF,y
Font_86 	INX				;e1f8
Font_87 	DEX				;e1f9
		BPL Font_82
		CPY r8L
		BNE Font_81
		RTS

Font_9		LSR Z45 			;e201
		ROR Z45+1
		ROR Z45+2
		ROR Z45+3
		ROR Z45+4
		ROR Z45+5
		ROR Z45+6
		ROR Z45+7
		RTS

Font_10 	NOP				;e212
		TAY
		+PushB r1H
		TYA
	JSR Font_1
		BCS Font_108
Font_100	CLC				;e21d
		LDA currentMode
		AND #SET_UNDERLINE | SET_ITALIC
		BEQ Font_101
	JSR Font_3
Font_101	PHP				;e227
		BCS Font_102
		JSR FntIndirectJMP
Font_102	+bbrf 7, r8H, Font_103		;e22d
	JSR Font_5
		+bra Font_104
Font_103 JSR Font_6				;e237
Font_104	PLP				;e23a
		BCS Font_106
		LDA r1H
		CMP windowTop
		BCC Font_106
		CMP windowBottom
		BCC Font_105
		BNE Font_106
Font_105 JSR Font_4				;e249
Font_106	INC r5L 			;e24c
		INC r6L
		LDA r5L
		AND #%00000111
		BNE Font_107
		INC r5H
		INC r6H
		+AddVB $38, r5L
		STA r6L
		BCC Font_107
		INC r5H
		INC r6H
Font_107	INC r1H 			;e269
		DEC r10H
		BNE Font_100
Font_108	+PopB r1H			;e26f
		RTS

;procedures indexed from Font_Tab2, DO NOT CHANGE!

FontSH1 	LSR				;e273
		LSR
		LSR
		LSR
		LSR
		LSR
		LSR
		JMP FntShJump
FontSH2 	LSR				;e27d
		ROR Z46
		ROR Z47
		LSR
		ROR Z46
		ROR Z47
		LSR
		ROR Z46
		ROR Z47
		LSR
		ROR Z46
		ROR Z47
		LSR
		ROR Z46
		ROR Z47
		LSR
		ROR Z46
		ROR Z47
		LSR
		ROR Z46
		ROR Z47
		JMP FntShJump
FontSH3 	ASL				;e2a3
		ASL
		ASL
		ASL
		ASL
		ASL
		ASL
		JMP FntShJump
FontSH4 	ASL Z47 			;e2ad
		ROL Z46
		ROL
		ASL Z47
		ROL Z46
		ROL
		ASL Z47
		ROL Z46
		ROL
		ASL Z47
		ROL Z46
		ROL
		ASL Z47
		ROL Z46
		ROL
		ASL Z47
		ROL Z46
		ROL
		ASL Z47
		ROL Z46
		ROL
		JMP FntShJump
FontSH5 	STA Z45 			;e2d3
		LDA r7L
	+sub E87FD
		BEQ FntSh52
		BCC FntSh53
		TAY
FntSh51 JSR Font_9				;e2e0
		DEY
		BNE FntSh51
FntSh52 	LDA Z45 			;e2e6
		JMP FntShJump
FntSh53 LDA E87FD				;e2eb
		+sub r7L
		TAY
FntSh54 	ASL Z45+7			;e2f2
		ROL Z45+6
		ROL Z45+5
		ROL Z45+4
		ROL Z45+3
		ROL Z45+2
		ROL Z45+1
		ROL Z45
		DEY
		BNE FntSh54
		LDA Z45
FntShJump	STA Z45 			;e307
		+bbrf BOLD_BIT, currentMode, FntSh56
		LDA #0
		PHA
		LDY #$ff
FntSh55 	INY				;e312
		LDX Z45,y
		PLA
		ORA ID100+$10,x
		STA Z45,y
		TXA
		LSR
		LDA #0
		ROR
		PHA
		CPY r8L
		BNE FntSh55
		PLA
FntSh56 	RTS				;e327

; end of indexed table, keep on changin'

FntIndirectJMP	LDY #0				;e328
		JMP (r13)

FontGt1 	STY Z45+1			;e32d
		STY Z45+2
		LDA (r2),y
	AND E87FC
		AND r7H
		JMP (r12)

FontGt2 	STY Z45+2			;e33b
		STY Z45+3
		LDA (r2),y
	AND E87FC
		STA Z45
		INY
		LDA (r2),y
		AND r7H
		STA Z45+1
FontGt2_1	LDA Z45 			;e34d
		JMP (r12)

FontGt3 	STY Z45+3			;e352
		STY Z45+4
		LDA (r2),y
	AND E87FC
		STA Z45
		INY
		LDA (r2),y
		STA Z45+1
		INY
		LDA (r2),y
		AND r7H
		STA Z45+2
		+bra FontGt2_1

FontGt4 	LDA (r2),y			;e36c
	AND E87FC
		STA Z45
FontGt4_1	INY				;e373
		CPY r3H
		BEQ FontGt4_2
		LDA (r2),y
		STA Z45,y
		+bra FontGt4_1
FontGt4_2	LDA (r2),y			;e380
		AND r7H
		STA Z45,y
		LDA #0
		STA Z45+1,y
		STA Z45+2,y
		BEQ FontGt2_1
