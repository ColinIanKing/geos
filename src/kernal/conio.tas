
;simply console I/O

;17-8-99 - ACME port

_PutChar					;e4ec
		CMP #$20
		BCS PutChar1
		TAY
		LDA PutCharTabL-8,y	;e543
		LDX PutCharTabH-8,y	;e557
		JMP CallRoutine
PutChar1	PHA				;e4fa
		LDY r11H
		STY r13H
		LDY r11L
		STY r13L
		LDX currentMode
		JSR _GetRealSize
		DEY
		TYA
		+add r13L
		STA r13L
		BCC *+4
		INC r13H
		+CmpW rightMargin, r13
		BCC PutChar4
		+CmpW leftMargin, r11
		BEQ PutChar2
		BCS PutChar3
PutChar2	PLA				;e52d
		+subv $20
		JMP Font_10
PutChar3	LDA r13L			;e534
		+addv 1
		STA r11L
		LDA r13H
		ADC #0
		STA r11H
PutChar4	PLA				;e541
		LDX StringFaultVec+1
		LDA StringFaultVec
		JMP CallRoutine

_SmallPutChar					;e573
		+subv $20
		JMP Font_10

DoTAB		LDA #0				;e579
		+add r11L
		STA r11L
		BCC *+4
		INC r11H
		RTS

DoLF		LDA r1H 			;e585
		SEC
		ADC curHeight
		STA r1H
		RTS

DoHOME		+LoadW r11, 0			;e58d
		STA r1H
DoESC_RULER	RTS

DoUPLINE	+SubB curHeight, r1H		;e596
		RTS

DoCR		+MoveW leftMargin, r11		;e59e
		JMP DoLF

DoULINEON	+smbf UNDERLINE_BIT, currentMode	;e5a9
		RTS

DoULINEOFF	+rmbf UNDERLINE_BIT, currentMode	;e5b0
		RTS

DoREV_ON	+smbf REVERSE_BIT, currentMode		;e5b7
		RTS

DoREV_OFF	+rmbf REVERSE_BIT, currentMode		;e5be
		RTS

DoGOTOX 	INC r0L 			;e5c5
		BNE *+4
		INC r0H
		LDY #0
		LDA (r0),y
		STA r11L
		INC r0L
		BNE *+4
		INC r0H
		LDA (r0),y
		STA r11H
		RTS

DoGOTOY 	INC r0L 			;e5dc
		BNE *+4
		INC r0H
		LDY #0
		LDA (r0),y
		STA r1H
		RTS

DoGOTOXY	JSR DoGOTOX			;e5e9
		JMP DoGOTOY

DoNEWCARDSET	+AddVW 3, r0			;e5ef
		RTS

DoBOLDON	+smbf BOLD_BIT, currentMode	;e5fb
		RTS

DoITALICON	+smbf ITALIC_BIT, currentMode	;e602
		RTS

DoOUTLINEON	+smbf OUTLINE_BIT, currentMode	;e609
		RTS

DoPLAINTEXT	+LoadB currentMode, NULL	;e610
		RTS

DoBACKSPC	LDX currentMode 		;e615
		JSR _GetRealSize
		STY PrvCharWidth
DoBACKSPACE	+SubB PrvCharWidth, r11L	;e61d
		BCS *+4
		DEC r11H
		+PushW r11
		LDA #$5f
		JSR Font_10
		+PopW r11
		RTS

DoESC_GRAPHICS	INC r0L 			;e63b
		BNE *+4
		INC r0H
		JSR _GraphicsString
		LDX #r0
		JSR Ddec
		LDX #r0
		jmp Ddec

_i_PutString	+PopB r0L			;e64f
		PLA
		INC r0L
		BNE iPutSt1
		+addv 1
iPutSt1 	STA r0H 			;e65a
		LDY #0
		LDA (r0),y
		INC r0L
		BNE *+4
		INC r0H
		STA r11L
		LDA (r0),y
		INC r0L
		BNE *+4
		INC r0H
		STA r11H
		LDA (r0),y
		INC r0L
		BNE *+4
		INC r0H
		STA r1H
		JSR _PutString
		INC r0L
		BNE *+4
		INC r0H
		JMP (r0)

_PutString					;e688
		LDY #0
		LDA (r0),y
		BEQ PutStr1
		JSR _PutChar
		INC r0L
		BNE *+4
		INC r0H
		+bra _PutString
PutStr1 	RTS				;e69a

_UseSystemFont					;e69b
		+LoadW r0, BSWFont
_LoadCharSet	LDY #0				;e6a3
UseSysFnt1	LDA (r0),y			;e6a5
		STA baselineOffset,y
		INY
		CPY #8
		BNE UseSysFnt1
		+AddW r0, curIndexTable
		+AddW r0, cardDataPntr
		rts

_GetCharWidth					;e6d5
		+subv $20
		BCS GetChWdth1
		LDA #0
		RTS
GetChWdth1	CMP #$5f			;e6dd
		BNE GetChWdth2
		LDA PrvCharWidth
		RTS
GetChWdth2	ASL				;e6e5
		TAY
		INY
		INY
		LDA (curIndexTable),y
		DEY
		DEY
		SEC
		SBC (curIndexTable),y
		RTS

_GetString					;e6f1
		+MoveW r0, string
		+MoveB r1L, stringMargCtrl
		+MoveB r1H, stringY
		+MoveB r2L, stringMaxLen
		+PushB r1H
		CLC
		LDA baselineOffset
		ADC r1H
		STA r1H
		JSR PutString
		+PopB r1H
		SEC
		LDA r0L
		SBC string
		STA stringLen
		+MoveW r11, stringX
		+MoveW keyVector, tmpKeyVector
		LDA #>GSSkeyVector
		STA keyVector+1
		LDA #<GSSkeyVector
		STA keyVector
		LDA #>GSStringFault
		STA StringFaultVec+1
		LDA #<GSStringFault
		STA StringFaultVec
		+bbrf 7, stringMargCtrl, GetStr1
		+MoveW r4, StringFaultVec
GetStr1 	LDA curHeight			;e759
		JSR _InitTextPrompt
		JMP _PromptOn

GSStringFault	+MoveB stringLen, stringMaxLen	;e761
		DEC stringLen
GSStrFltEnd	RTS

ProcessCursor	LDA alphaFlag			;e76b
		BPL GSStrFltEnd
		DEC alphaFlag
		LDA alphaFlag
		AND #$3f
		BNE GSStrFltEnd
		+bbrf 6, alphaFlag, ProcCur1
		JMP _PromptOff
ProcCur1	JMP _PromptOn			;e782

GSSkeyVector					;e786
		JSR _PromptOff
		+MoveW stringX, r11
		+MoveB stringY, r1H
		LDY stringLen
		LDA keyData
		BPL GSSkeyVec2
GSSkeyVec1	RTS				;e7a0
GSSkeyVec2	CMP #CR 			;e7a1
		BEQ GSSkeyVec5
		CMP #BACKSPACE
		BEQ GSSkeyVec3
		CMP #KEY_DELETE
		BEQ GSSkeyVec3
		CMP #KEY_INSERT
		BEQ GSSkeyVec3
		CMP #KEY_RIGHT
		BEQ GSSkeyVec3
		CMP #" "
		BCC GSSkeyVec1
		CPY stringMaxLen
		BEQ GSSkeyVec4
		STA (string),y
		+PushB dispBufferOn
		+bbrf 5, dispBufferOn, GSSkeyVec21
		+LoadB dispBufferOn, (ST_WR_FORE | ST_WRGS_FORE)
GSSkeyVec21	+PushB r1H			;e7cd
		CLC
		LDA baselineOffset
		ADC r1H
		STA r1H
		LDA (string),y
		JSR PutChar
		+PopB r1H
		+PopB dispBufferOn
		INC stringLen
		LDX r11H
		STX stringX+1
		LDX r11L
		STX stringX
		+bra GSSkeyVec4
GSSkeyVec3	JSR GSHelp1			;e7f2
		+bra GSSkeyVec4
GSSkeyVec4	JMP _PromptOn			;e7f8
GSSkeyVec5	SEI				;e7fb
		JSR _PromptOff
		LDA #%01111111
		AND alphaFlag
		STA alphaFlag
		CLI
		LDA #0
		STA (string),y
		+MoveW tmpKeyVector, r0
		LDA #0
		STA keyVector
		STA keyVector+1
		STA StringFaultVec
		STA StringFaultVec+1
		LDX stringLen
		JMP (r0)

GSHelp1 	CPY #0				;e82a
		BEQ GSHelp12
		DEY
		STY stringLen
		+PushB dispBufferOn
		+bbrf 5, dispBufferOn, GSHelp11
		+LoadB dispBufferOn, (ST_WR_FORE | ST_WRGS_FORE)
GSHelp11	+PushB r1H
		CLC
		LDA baselineOffset
		ADC r1H
		STA r1H
		LDA (string),y
		JSR DoBACKSPC
		+PopB r1H
		LDY stringLen
		+PopB dispBufferOn
		LDX r11H
		STX stringX+1
		LDX r11L
		STX stringX
		CLC
		RTS
GSHelp12	SEC				;e863
		RTS
;e865


_PromptOn					;e865
		LDA #%01000000
		ORA alphaFlag
		STA alphaFlag
		+LoadB r3L, 1
		+MoveW stringX, r4
		+MoveB stringY, r5L
		JSR _PosSprite
		JSR _EnablSprite
		+bra PrmptOff1

_PromptOff					;e889
		LDA #%10111111
		AND alphaFlag
		STA alphaFlag
		+LoadB r3L, 1
		JSR _DisablSprite
PrmptOff1	LDA alphaFlag			;e898
		AND #%11000000
		ORA #%00111100
		STA alphaFlag
		RTS

_InitTextPrompt 				;e8a3
		TAY
		+PushB CPU_DATA
		+LoadB CPU_DATA, $35
		+MoveB mob0clr, mob1clr
		LDA moby2
		AND #%11111101
		STA moby2
		TYA
		PHA
		+LoadB alphaFlag, %10000011
		LDX #64
		LDA #0
IniTxPrm1	STA spr1pic-1,x 		;e8c4
		DEX
		BNE IniTxPrm1
		PLA
		TAY
		CPY #21
		BCC IniTxPrm2
		BEQ IniTxPrm2
		TYA
		LSR
		TAY
		LDA moby2
		ORA #2
		STA moby2
IniTxPrm2	LDA #%10000000			;e8dd
IniTxPrm3	STA spr1pic,x			;e8df
		INX
		INX
		INX
		DEY
		BPL IniTxPrm3
		+PopB CPU_DATA
		RTS

CalcDecimal	STA r2L 			;e8ec
		+LoadB r2H, 4
		+LoadW r3, 0
CalcDec0	LDY #0				;e8f8
		LDX r2H
CalcDec1	LDA r0L 			;e8fc
		SEC
		SBC DecTabL,x
		STA r0L
		LDA r0H
		SBC DecTabH,x
		BCC CalcDec2
		STA r0H
		INY
		+bra CalcDec1
CalcDec2	LDA r0L
		ADC DecTabL,x
		STA r0L
		TYA
		BNE CalcDec3
		CPX #0
		BEQ CalcDec3
		+bbsf 6, r2L, CalcDec4
CalcDec3	ORA #%00110000			;e923
		LDX r3L
		STA Z45,x
		LDX currentMode
		JSR _GetRealSize
		TYA
		+add r3H
		STA r3H
		INC r3L
		LDA #%10111111
		AND r2L
		STA r2L
CalcDec4	DEC r2H 			;e93c
		BPL CalcDec0
		RTS

_PutDecimal					;e94b
		JSR CalcDecimal
		+bbsf 7, r2L, PutDec1
		LDA r2L
		AND #$3f
		+sub r3H
		+add r11L
		STA r11L
		BCC *+4
		INC r11H
PutDec1 	LDX r3L 			;e962
		STX r0L
PutDec2 	LDA Z45-1,x			;e966
		PHA
		DEX
		BNE PutDec2
PutDec3 	PLA				;e96c
		JSR _PutChar
		DEC r0L
		BNE PutDec3
		RTS

_GetNextChar					;fceb
		+bbrf KEYPRESS_BIT, pressFlag, GetNxtChar1
		JMP KbdScanHelp3
GetNxtChar1	LDA #0				;fcf2
		RTS
